// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  password,
  role,
  created,
  updated
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, username, password, role, created, updated
`

type CreateUserParams struct {
	Username sql.NullString `json:"username"`
	Password sql.NullString `json:"password"`
	Role     sql.NullString `json:"role"`
	Created  sql.NullTime   `json:"created"`
	Updated  sql.NullTime   `json:"updated"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Role,
		arg.Created,
		arg.Updated,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, role, created, updated FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, username, password, role, created, updated FROM users
ORDER BY name
`

func (q *Queries) ListUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Role,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
