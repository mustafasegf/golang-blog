// Code generated by sqlc. DO NOT EDIT.
// source: blog.sql

package db

import (
	"context"
	"database/sql"
)

const createBlog = `-- name: CreateBlog :one
INSERT INTO blog (
  title,
  content,
  created,
  updated,
  author_id
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, title, content, created, updated, author_id
`

type CreateBlogParams struct {
	Title    sql.NullString `json:"title"`
	Content  sql.NullString `json:"content"`
	Created  sql.NullTime   `json:"created"`
	Updated  sql.NullTime   `json:"updated"`
	AuthorID sql.NullInt32  `json:"author_id"`
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (Blog, error) {
	row := q.db.QueryRowContext(ctx, createBlog,
		arg.Title,
		arg.Content,
		arg.Created,
		arg.Updated,
		arg.AuthorID,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Created,
		&i.Updated,
		&i.AuthorID,
	)
	return i, err
}

const deleteBlog = `-- name: DeleteBlog :exec


DELETE FROM blog
WHERE id = $1
`

// -- name: UpdateBlogContent :one
// UPDATE blog
// SET content = $2,
// WHERE id = $1
// RETURNING *;
// -- name: UpdateBlogTitle :one
// UPDATE blog
// SET title = $2,
// WHERE id = $1
// RETURNING *;
func (q *Queries) DeleteBlog(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBlog, id)
	return err
}

const getBlog = `-- name: GetBlog :one
SELECT id, title, content, created, updated, author_id FROM blog
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBlog(ctx context.Context, id int32) (Blog, error) {
	row := q.db.QueryRowContext(ctx, getBlog, id)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Created,
		&i.Updated,
		&i.AuthorID,
	)
	return i, err
}

const listBlog = `-- name: ListBlog :many
SELECT id, title, content, created, updated, author_id FROM blog
ORDER BY TITLE
`

func (q *Queries) ListBlog(ctx context.Context) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, listBlog)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Created,
			&i.Updated,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
