// Code generated by sqlc. DO NOT EDIT.
// source: comment.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  blog_id,
  user_id,
  comment
) VALUES (
  $1, $2, $3
) RETURNING id, blog_id, user_id, comment
`

type CreateCommentParams struct {
	BlogID  int32  `json:"blog_id"`
	UserID  int32  `json:"user_id"`
	Comment string `json:"comment"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.BlogID, arg.UserID, arg.Comment)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.BlogID,
		&i.UserID,
		&i.Comment,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getComment = `-- name: GetComment :many
SELECT id, blog_id, user_id, comment FROM comments
WHERE blog_id = $1
`

func (q *Queries) GetComment(ctx context.Context, blogID int32) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getComment, blogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.BlogID,
			&i.UserID,
			&i.Comment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneComment = `-- name: GetOneComment :one
SELECT id, blog_id, user_id, comment FROM comments
WHERE id = $1
`

func (q *Queries) GetOneComment(ctx context.Context, id int32) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getOneComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.BlogID,
		&i.UserID,
		&i.Comment,
	)
	return i, err
}

const updateComment = `-- name: UpdateComment :exec
UPDATE comments
SET comment = $2
WHERE id = $1
RETURNING id, blog_id, user_id, comment
`

type UpdateCommentParams struct {
	ID      int32  `json:"id"`
	Comment string `json:"comment"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) error {
	_, err := q.db.ExecContext(ctx, updateComment, arg.ID, arg.Comment)
	return err
}
