// Code generated by sqlc. DO NOT EDIT.
// source: comment.sql

package db

import (
	"context"
	"database/sql"
)

const createComment = `-- name: CreateComment :one
INSERT INTO user_comment (
  blog_id,
  user_id,
  coment
) VALUES (
  $1, $2, $3
) RETURNING id, blog_id, user_id, coment
`

type CreateCommentParams struct {
	BlogID sql.NullInt32  `json:"blog_id"`
	UserID sql.NullInt32  `json:"user_id"`
	Coment sql.NullString `json:"coment"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (UserComment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.BlogID, arg.UserID, arg.Coment)
	var i UserComment
	err := row.Scan(
		&i.ID,
		&i.BlogID,
		&i.UserID,
		&i.Coment,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec

DELETE FROM user_comment
WHERE id = $1
`

// -- name: UpdateCommentContent :one
// UPDATE user_comment
// SET content = $2,
// WHERE id = $1
// RETURNING *;
func (q *Queries) DeleteComment(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const listComment = `-- name: ListComment :many
SELECT id, blog_id, user_id, coment FROM user_comment
WHERE blog_id = $1
`

func (q *Queries) ListComment(ctx context.Context, blogID sql.NullInt32) ([]UserComment, error) {
	rows, err := q.db.QueryContext(ctx, listComment, blogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserComment
	for rows.Next() {
		var i UserComment
		if err := rows.Scan(
			&i.ID,
			&i.BlogID,
			&i.UserID,
			&i.Coment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
