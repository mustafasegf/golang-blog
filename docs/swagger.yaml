definitions:
  api.loginUserResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/api.userResponse'
    type: object
  api.userResponse:
    properties:
      name:
        type: string
      username:
        type: string
    type: object
  db.CreateBlogRow:
    properties:
      author_id:
        type: integer
      content:
        type: string
      id:
        type: integer
      name:
        type: object
      title:
        type: string
    type: object
  db.CreateCommentRow:
    properties:
      blog_id:
        type: integer
      comment:
        type: string
      id:
        type: integer
      name:
        type: object
      user_id:
        type: integer
    type: object
  db.GetBlogRow:
    properties:
      content:
        type: string
      id:
        type: integer
      name:
        type: string
      title:
        type: string
      userid:
        type: integer
    type: object
  db.ListBlogRow:
    properties:
      content:
        type: string
      id:
        type: integer
      name:
        type: string
      title:
        type: string
      userid:
        type: integer
    type: object
info:
  contact: {}
  description: Simple golang blog for backend practice
  title: Golang-blog project
  version: "1.0"
paths:
  /api/blogs:
    get:
      description: get all blog in json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.ListBlogRow'
            type: array
      summary: Show all blog
      tags:
      - blog
  /api/blogs/{id}:
    delete:
      description: Delete blog by id
      parameters:
      - description: Blog ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Blog deleted
          schema:
            type: string
      summary: Delete a blog
      tags:
      - blog
    get:
      consumes:
      - application/json
      description: get blog by id
      parameters:
      - description: Blog ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.GetBlogRow'
      summary: Show a blog
      tags:
      - blog
    patch:
      consumes:
      - application/json
      description: Update blog title and content
      parameters:
      - description: Blog ID
        in: path
        name: id
        required: true
        type: integer
      - description: Blog title
        in: body
        name: title
        schema:
          type: string
      - description: Blog content
        in: body
        name: content
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Blog Updated
          schema:
            type: string
      summary: Update a blog
      tags:
      - blog
    post:
      consumes:
      - application/json
      description: Create blog by title and content
      parameters:
      - description: Blog ID
        in: path
        name: id
        required: true
        type: integer
      - description: Blog title
        in: body
        name: title
        schema:
          type: string
      - description: Blog content
        in: body
        name: content
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.CreateBlogRow'
      summary: Create a blog
      tags:
      - blog
  /api/blogs/{id}/comments:
    post:
      consumes:
      - application/json
      description: Create comment by id and comment
      parameters:
      - description: Blog ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment content
        in: body
        name: content
        required: true
        schema:
          type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.CreateCommentRow'
      summary: Create a comment
      tags:
      - comment
  /api/comments/{id}:
    delete:
      consumes:
      - application/json
      description: delete comment by comment id
      parameters:
      - description: Blog ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.CreateCommentRow'
      summary: delete comment
      tags:
      - comment
    get:
      consumes:
      - application/json
      description: get all comment by blog id
      parameters:
      - description: Blog ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.CreateCommentRow'
      summary: get all comment in blog
      tags:
      - comment
    patch:
      consumes:
      - application/json
      description: update comment by comment id
      parameters:
      - description: Blog ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment content
        in: body
        name: content
        required: true
        schema:
          type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.CreateCommentRow'
      summary: update comment
      tags:
      - comment
  /api/users:
    post:
      consumes:
      - application/json
      description: Create user by username, password and name
      parameters:
      - description: username
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: password
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: name
        in: body
        name: name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.userResponse'
      summary: Create a user
      tags:
      - user
  /api/users/login:
    post:
      consumes:
      - application/json
      description: login user by username and password
      parameters:
      - description: username
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.loginUserResponse'
      summary: login a user
      tags:
      - user
swagger: "2.0"
